services = [
  'controller',
  'id_allocator',
  'metadata_dissemination_rpc',
  'tx_gateway',
]

service_hdrs = []
foreach service : services
  t = custom_target(
    input : f'@service@.json',
    output : f'@service@_service.h',
    command : [rpcgen, '--service_file', '@INPUT@', '--output_file', '@OUTPUT@'])
  service_hdrs += [t]
endforeach

libcluster = library('cluster', [
    'archival_metadata_stm.cc',
    'metadata_cache.cc',
    'partition_manager.cc',
    'scheduling/partition_allocator.cc',
    'logger.cc',
    'config_frontend.cc',
    'config_manager.cc',
    'cluster_utils.cc',
    'id_allocator.cc',
    'id_allocator_frontend.cc',
    'rm_partition_frontend.cc',
    'tx_gateway_frontend.cc',
    'tx_gateway.cc',
    'service.cc',
    'metadata_dissemination_handler.cc',
    'metadata_dissemination_service.cc',
    'metadata_dissemination_utils.cc',
    'types.cc',
    'notification_latch.cc',
    'topic_table.cc',
    'topic_updates_dispatcher.cc',
    'members_table.cc',
    'members_manager.cc',
    'partition_leaders_table.cc',
    'topics_frontend.cc',
    'controller_backend.cc',
    'controller.cc',
    'partition.cc',
    'partition_probe.cc',
    'id_allocator_stm.cc',
    'persisted_stm.cc',
    'tm_stm.cc',
    'rm_stm.cc',
    'tx_helpers.cc',
    'security_manager.cc',
    'security_frontend.cc',
    'data_policy_manager.cc',
    'data_policy_frontend.cc',
    'controller_api.cc',
    'members_frontend.cc',
    'members_backend.cc',
    'health_manager.cc',
    'non_replicable_topics_frontend.cc',
    'scheduling/allocation_node.cc',
    'scheduling/types.cc',
    'scheduling/allocation_state.cc',
    'scheduling/allocation_strategy.cc',
    'scheduling/constraints.cc',
    'scheduling/leader_balancer.cc',
    'scheduling/leader_balancer_probe.cc',
    'health_monitor_types.cc',
    'health_monitor_backend.cc',
    'health_monitor_frontend.cc',
    'metrics_reporter.cc',
    'node/types.cc',
    'node/local_monitor.cc',
    'feature_backend.cc',
    'feature_manager.cc',
    'feature_barrier.cc',
    'feature_table.cc',
    'drain_manager.cc',
    service_hdrs],
  dependencies : [seastar, config, xxhash, hdrhist, roaring, absl, boost],
  cpp_args : '-DXXH_PRIVATE_API',
  link_with : [bytes, model, http, rpc],
  implicit_include_directories : false,
  include_directories: include_dirs)

cluster = declare_dependency(
  sources: service_hdrs,
  dependencies : [seastar, config],
  link_with: libcluster,
  include_directories: include_dirs)
